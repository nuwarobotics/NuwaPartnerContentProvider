package com.nuwarobotics.provider.cmdcontent;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteException;
import android.net.Uri;
import android.util.Log;

/**
 * SAMPLE Code of insert/update/delete 
 */

public class PartnerProviderAPI {

    /**
     * 3rd define it-own AUTHORITY string
     * NOTIEC : It must same with string define on AndroidManifest.xml
     *         <provider
     *             android:name=".PartnerContentProvider"
     *             android:authorities="com.3rd.provider.content.cmd"
     *             android:exported="true">
     */
    public static final String AUTHORITY = "com.3rd.provider.content.cmd";
    /**
     * 3rd define it-own table name
     * NOTICE : It must declare metaData on AndroidManifest.xml
     *             <meta-data
     *                 android:name="com.nuwarobotics.api.meta.PARTNER_CONTENT_TABLE"
     *                 android:value="nuwa_example_cmd_table" />
     */
    public static final String TABLE_NAME = "nuwa_example_cmd_table";

    /**
     * 3rd could define it's own table name  (Suggest not modify)
     */
    public static final String DATABASE_NAME = "PartnerContentDB";


    /**
     * Insert
     * @param context Application context for content resolver using.
     * @param values The data is about a kind of hash table to insert values to related fields.
     * @return Uri that generated by content resolver when insert action is finished.
     */
    public static Uri insert(Context context, ContentValues values)  {
        return context.getContentResolver().insert(DataColumns.TABLE_NAME_CMD_LIST_CONTENTURI, values);
    }

    /**
     * Update
     * @param context Application context for content resolver using.
     * @param values The data is about a kind of hash table to update values to related fields.
     * @param where A filter to apply to rows before updating, formatted as an SQL WHERE clause
     *                     (excluding the WHERE itself).
     * @param args An array of values that are mapped in order to each "?" in WHERE selection.
     * @return The number of rows updated.
     */
    public static int update(Context context, ContentValues values, String where, String[] args)  {
        return context.getContentResolver().update(DataColumns.TABLE_NAME_CMD_LIST_CONTENTURI, values, where, args);
    }

    /**
     * Delete
     * @param context Application context for content resolver using.
     * @param where A filter to apply to rows before updating, formatted as an SQL WHERE clause
     *                     (excluding the WHERE itself).
     * @param args An array of values that are mapped in order to each "?" in WHERE selection.
     * @return The number of rows updated.
     */
    public static int delete(Context context, String where, String[] args)  {
        return context.getContentResolver().delete(DataColumns.TABLE_NAME_CMD_LIST_CONTENTURI, where, args);
    }






}
